use metaverse_messages::packet::{packet::Packet, packet_types::PacketType};
use uuid::{Uuid, uuid};
const PACKET: [u8; 169] = [
    192, 0, 3, 4, 0, 1, 12, 0, 1, 232, 3, 0, 2, 232, 3, 0, 1, 255, 255, 1, 246, 81, 208, 22, 0, 1,
    157, 193, 139, 177, 4, 79, 76, 104, 144, 107, 44, 182, 8, 178, 225, 151, 0, 4, 47, 4, 0, 1,
    102, 102, 230, 62, 154, 153, 25, 63, 56, 21, 219, 63, 76, 0, 14, 128, 63, 94, 43, 0, 1, 67,
    216, 1, 0, 1, 67, 7, 137, 126, 63, 0, 32, 42, 166, 173, 60, 0, 46, 78, 0, 1, 70, 105, 114, 115,
    116, 78, 97, 109, 101, 32, 83, 84, 82, 73, 78, 71, 32, 82, 87, 32, 83, 86, 32, 100, 101, 102,
    97, 117, 108, 116, 10, 76, 97, 115, 116, 78, 97, 109, 101, 32, 83, 84, 82, 73, 78, 71, 32, 82,
    87, 32, 83, 86, 32, 117, 115, 101, 114, 10, 84, 105, 116, 108, 101, 32, 83, 84, 82, 73, 78, 71,
    32, 82, 87, 32, 83, 86, 32, 0, 77,
];

const PACKET2: [u8; 160] = [
    192, 0, 0, 0, 18, 0, 12, 0, 1, 66, 39, 0, 2, 162, 40, 0, 1, 255, 255, 1, 0, 1, 88, 126, 29, 0,
    1, 254, 189, 105, 110, 131, 188, 70, 110, 171, 72, 99, 132, 234, 103, 190, 207, 134, 110, 176,
    52, 9, 3, 0, 1, 59, 168, 95, 64, 59, 168, 95, 64, 51, 55, 191, 63, 60, 78, 11, 16, 192, 97,
    108, 241, 63, 74, 206, 117, 63, 0, 24, 161, 229, 9, 190, 140, 126, 131, 189, 255, 92, 104, 189,
    0, 12, 244, 87, 126, 29, 80, 4, 2, 0, 1, 16, 0, 20, 139, 185, 81, 0, 1, 156, 121, 63, 206, 185,
    185, 252, 31, 157, 217, 131, 66, 101, 155, 250, 66, 6, 175, 106, 234, 76, 211, 138, 78, 48,
    191, 151, 160, 125, 88, 202, 154, 228, 0, 1, 80, 0, 6, 64, 65, 0, 1, 102, 102, 102, 63, 0, 10,
    32, 0, 101,
];

const MORE_PACKET: [u8; 172] = [
    224, 0, 0, 0, 23, 0, 12, 0, 1, 66, 39, 0, 2, 162, 40, 0, 1, 255, 255, 1, 32, 89, 126, 29, 0, 1,
    186, 190, 2, 243, 77, 219, 64, 74, 143, 97, 248, 182, 3, 214, 214, 63, 156, 209, 87, 54, 9, 3,
    0, 2, 192, 188, 60, 0, 1, 38, 148, 63, 224, 226, 160, 63, 60, 57, 180, 236, 66, 213, 88, 2, 67,
    231, 204, 12, 66, 0, 52, 208, 0, 1, 2, 0, 1, 16, 1, 0, 4, 100, 100, 0, 15, 81, 0, 1, 87, 72,
    222, 204, 246, 41, 70, 28, 154, 54, 163, 90, 34, 31, 226, 31, 20, 55, 132, 88, 115, 227, 146,
    70, 41, 165, 172, 251, 125, 184, 162, 66, 22, 0, 1, 128, 128, 128, 0, 4, 128, 63, 0, 3, 128,
    63, 0, 10, 32, 0, 3, 26, 0, 30, 23, 1, 32, 0, 1, 16, 0, 3, 127, 127, 127, 255, 0, 2, 160, 64,
    0, 4, 10, 215, 35, 60, 0, 66,
];

const PACKET_3: [u8; 258] = [
    224, 0, 0, 0, 21, 0, 12, 0, 1, 52, 8, 0, 2, 52, 8, 0, 1, 255, 255, 1, 65, 192, 70, 25, 2, 162,
    30, 73, 173, 92, 155, 71, 74, 150, 214, 34, 109, 181, 180, 188, 94, 220, 176, 44, 200, 9, 3, 0,
    1, 250, 244, 5, 61, 250, 244, 5, 61, 136, 180, 218, 59, 60, 177, 195, 119, 187, 79, 14, 153,
    188, 162, 190, 155, 61, 0, 24, 255, 255, 255, 62, 3, 0, 2, 191, 255, 255, 255, 190, 0, 12, 54,
    192, 70, 25, 124, 13, 2, 16, 16, 0, 5, 100, 150, 0, 9, 212, 48, 0, 2, 108, 107, 122, 0, 1, 141,
    205, 74, 72, 45, 55, 73, 9, 159, 120, 247, 169, 235, 78, 249, 3, 2, 87, 72, 222, 204, 246, 41,
    70, 28, 154, 54, 163, 90, 34, 31, 226, 31, 1, 150, 93, 254, 188, 128, 28, 78, 242, 169, 134,
    178, 89, 160, 15, 245, 20, 0, 1, 129, 36, 0, 2, 2, 255, 0, 1, 255, 0, 1, 1, 129, 36, 0, 1, 255,
    0, 1, 180, 218, 132, 65, 3, 0, 2, 128, 63, 0, 1, 122, 50, 130, 65, 3, 0, 2, 128, 63, 0, 11, 1,
    32, 0, 1, 2, 3, 0, 21, 16, 3, 0, 1, 5, 8, 0, 6, 32, 66, 0, 2, 240, 65, 0, 11, 24, 1, 48, 0, 1,
    17, 0, 3, 5, 248, 79, 21, 133, 101, 68, 193, 181, 187, 238, 98, 122, 232, 45, 134, 5, 0, 66,
];

const DEFAULT_USER_ID: Uuid = uuid!("9dc18bb1044f4c68906b2cb608b2e197");
const TEST_FULL_ID: Uuid = uuid!("febd696e-83bc-466e-ab48-6384ea67becf");

#[test]
pub fn test_object_update() {
    let object_update = Packet::from_bytes(&PACKET).unwrap();
    match object_update.body {
        PacketType::ObjectUpdate(object) => {
            assert_eq!(object.full_id, DEFAULT_USER_ID)
        }
        _ => assert!(false),
    }
    let object_update = Packet::from_bytes(&PACKET2).unwrap();
    match object_update.body {
        PacketType::ObjectUpdate(object) => {
            assert_eq!(object.full_id, TEST_FULL_ID)
        }
        _ => assert!(false),
    }
}

//#[test]
//// this test WILL FAIL. this is a known bug. This test is for debugging it.
//pub fn test_failing_object() {
//    let object_update = Packet::from_bytes(&PACKET_3).unwrap();
//    match object_update.body {
//        PacketType::ObjectUpdate(object) => {
//            assert_eq!(object.full_id, TEST_FULL_ID)
//        }
//        _ => assert!(false),
//    }
//}
