/** 
 * @file Tea.cpp
 * @brief Tea viewer helper library
 *
 * Copyright (C) 2012 arminweatherwax (at) lavabit.com
 * You can use it under the following license:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include "tea.h"
#include <boost/algorithm/string.hpp>


std::string Tea::sGridCurrency="L$";
std::string Tea::sRegionCurrency="";
std::string Tea::sActiveCurrency="L$";

Tea::Tea()
{
}


Tea::~Tea()
{
}

void Tea::setCurrency(const std::string& currency)
{
	sGridCurrency = currency;
	updateActiveCurrencySymbol();
}

void Tea::setRegionCurrency(const std::string& currency)
{
	sRegionCurrency = currency;
	updateActiveCurrencySymbol();
}

void Tea::updateActiveCurrencySymbol()
{
	if(!sRegionCurrency.empty())
	{
		sActiveCurrency = sRegionCurrency;
	}
	else
	{
		sActiveCurrency = sGridCurrency;
	}
}

std::string Tea::wrapCurrency(const std::string& to_substitute)
{
	return boost::algorithm::replace_all_copy(to_substitute, "L$",  sActiveCurrency);
}

void Tea::wrapCurrency(std::string& to_substitute)
{
	boost::algorithm::replace_all(to_substitute, "L$",  sActiveCurrency);
}
