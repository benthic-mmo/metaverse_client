use login::models::simulator_login_protocol::{SimulatorLoginOptions, SimulatorLoginProtocol};

pub fn login(
    url_string: String,
    first: String,
    last: String,
    passwd: String,
    start: String,
    channel: Option<String>,
    version: Option<String>,
    platform: Option<String>,
    platform_string: Option<String>,
    platform_version: Option<String>,
    mac: Option<String>,
    id0: Option<String>,
    agree_to_tos: Option<bool>,
    read_critical: Option<bool>,
    viewer_digest: Option<String>,
    address_size: Option<String>,
    extended_errors: Option<String>,
    last_exec_event: Option<i64>,
    last_exec_duration: Option<String>,
    skipoptional: Option<bool>,
    adult_compliant: Option<String>,
    advanced_mode: Option<String>,
    avatar_picker_url: Option<String>,
    buddy_list: Option<String>,
    classified_categories: Option<String>,
    currency: Option<String>,
    destination_guide_url: Option<String>,
    display_names: Option<String>,
    event_categories: Option<String>,
    gestures: Option<String>,
    global_textures: Option<String>,
    inventory_root: Option<String>,
    inventory_skeleton: Option<String>,
    inventory_lib_root: Option<String>,
    inventory_lib_owner: Option<String>,
    inventory_skel_lib: Option<String>,
    login_flags: Option<String>,
    max_agent_groups: Option<String>,
    max_groups: Option<String>,
    map_server_url: Option<String>,
    newuser_config: Option<String>,
    search: Option<String>,
    tutorial_setting: Option<String>,
    ui_config: Option<String>,
    voice_config: Option<String>,
) -> xmlrpc::Value {
    let login_data: SimulatorLoginProtocol = SimulatorLoginProtocol {
        first,
        last,
        passwd,
        start,
        channel,
        version,
        platform,
        platform_string,
        platform_version,
        mac,
        id0,
        agree_to_tos,
        read_critical,
        viewer_digest,
        address_size,
        extended_errors,
        last_exec_event,
        last_exec_duration,
        skipoptional,
        options: SimulatorLoginOptions {
            adult_compliant,
            advanced_mode,
            avatar_picker_url,
            buddy_list,
            classified_categories,
            currency,
            destination_guide_url,
            display_names,
            event_categories,
            gestures,
            global_textures,
            inventory_root,
            inventory_skeleton,
            inventory_lib_root,
            inventory_lib_owner,
            inventory_skel_lib,
            login_flags,
            max_agent_groups,
            max_groups,
            map_server_url,
            newuser_config,
            search,
            tutorial_setting,
            ui_config,
            voice_config,
        },
    };

    let req = xmlrpc::Request::new("login_to_simulator").arg(login_data);
    req.call_url(&url_string).unwrap()
}
